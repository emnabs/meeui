/**
 * Build Entry File Generator
 *
 * Auto-generates src/index.js with all component exports
 * Follows Element-UI v2.15.8 entry generation pattern
 *
 * @description
 * This script reads the components.json file and automatically generates
 * the main entry file (src/index.js) with proper imports, install function,
 * and exports for all components.
 *
 * @author MeeUI Team
 * @date 2025-10-22
 */

const fs = require('fs')
const path = require('path')

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m'
}

console.log(`${colors.cyan}[build-entry]${colors.reset} Starting entry file generation...`)

// Import component configuration
let components
try {
  components = require('./components.json')
  console.log(`${colors.cyan}[build-entry]${colors.reset} Loaded ${Object.keys(components).length} components from components.json`)
} catch (error) {
  console.error(`${colors.red}✖ [build-entry] Failed to load components.json!${colors.reset}`)
  console.error(`  Error: ${error.message}`)
  process.exit(1)
}

// Configuration
const OUTPUT_PATH = path.join(__dirname, '../src/index.js')
const IMPORT_TEMPLATE = `import %name% from '%path%'`
const INSTALL_COMPONENT_TEMPLATE = `  %name%`
const EXPORT_COMPONENT_TEMPLATE = `  %name%`

// Component names mapping (kebab-case to PascalCase)
const componentNameMap = {
  'alert': 'Alert',
  'avatar': 'Avatar',
  'button': 'Button',
  'byte-size': 'ByteSize',
  'card': 'Card',
  'cell': 'Cell',
  'cell-group': 'CellGroup',
  'circle': 'Circle',
  'clipboard': 'Clipboard',
  'clock': 'Clock',
  'color-block': 'ColorBlock',
  'count-down': 'CountDown',
  'coupon': 'Coupon',
  'currency': 'Currency',
  'descriptions': 'Descriptions',
  'descriptions-item': 'DescriptionsItem',
  'device': 'Device',
  'field': 'Field',
  'goods-action': 'GoodsAction',
  'goods-action-button': 'GoodsActionButton',
  'goods-action-icon': 'GoodsActionIcon',
  'goods-block': 'GoodsBlock',
  'goods-card': 'GoodsCard',
  'grid': 'Grid',
  'grid-item': 'GridItem',
  'icon': 'Icon',
  'image': 'Image',
  'index-anchor': 'IndexAnchor',
  'index-bar': 'IndexBar',
  'info': 'Info',
  'lazyload': 'Lazyload',
  'loading': 'Loading',
  'nav-bar': 'NavBar',
  'notice-bar': 'NoticeBar',
  'overlay': 'Overlay',
  'phone': 'Phone',
  'phone-number': 'PhoneNumber',
  'place-holder': 'PlaceHolder',
  'progress': 'Progress',
  'ratio-box': 'RatioBox',
  'remote-script': 'RemoteScript',
  'scale-box': 'ScaleBox',
  'search': 'Search',
  'statistic': 'Statistic',
  'status-bar': 'StatusBar',
  'sticky': 'Sticky',
  'swipe': 'Swipe',
  'swipe-cell': 'SwipeCell',
  'swipe-item': 'SwipeItem',
  'tab': 'Tab',
  'tabbar': 'Tabbar',
  'tabbar-item': 'TabbarItem',
  'tabs': 'Tabs',
  'tag': 'Tag',
  'zoom-box': 'ZoomBox'
}

// Build import statements
let importStatements = `/* Automatically generated by './build/build-entry.js' */\n/* Do not modify this file manually */\n\n`
const componentNames = []

Object.keys(components).forEach(key => {
  const componentName = componentNameMap[key]

  if (!componentName) {
    console.warn(`${colors.yellow}⚠ [build-entry] Warning: No name mapping found for component '${key}'${colors.reset}`)
    return
  }

  const componentPath = components[key].replace('./src/', './')

  importStatements += IMPORT_TEMPLATE
    .replace(/%name%/g, componentName)
    .replace(/%path%/g, componentPath) + '\n'

  componentNames.push(componentName)
})

console.log(`${colors.cyan}[build-entry]${colors.reset} Generated imports for ${componentNames.length} components`)

// Build install function components list
const installComponents = componentNames.map(name =>
  INSTALL_COMPONENT_TEMPLATE.replace(/%name%/g, name)
).join(',\n')

// Build export components list
const exportComponents = componentNames.map(name =>
  EXPORT_COMPONENT_TEMPLATE.replace(/%name%/g, name)
).join(',\n')

// Read version from package.json
let version = '2.0.0'
try {
  const packageJson = require('../package.json')
  version = packageJson.version
} catch (error) {
  console.warn(`${colors.yellow}⚠ [build-entry] Warning: Could not read version from package.json, using default${colors.reset}`)
}

// Generate file content
const fileContent = `${importStatements}
import './style/index.scss'

const version = '${version}'

const components = [
${installComponents}
]

const install = function(Vue) {
  components.forEach(component => {
    if (component && component.install) {
      Vue.use(component);
    } else if (component && component.name) {
      Vue.component(component.name, component);
    }
  })
}

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export {
  install,
  version,
${exportComponents}
}

export default {
  version,
  install
}
`

// Write file
try {
  // Ensure directory exists
  const outputDir = path.dirname(OUTPUT_PATH)
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true })
  }

  fs.writeFileSync(OUTPUT_PATH, fileContent, 'utf8')

  console.log(`${colors.green}✔ [build-entry] Entry file generated successfully!${colors.reset}`)
  console.log(`  ${colors.cyan}Path:${colors.reset} ${OUTPUT_PATH}`)
  console.log(`  ${colors.cyan}Components:${colors.reset} ${componentNames.length}`)
  console.log(`  ${colors.cyan}Version:${colors.reset} ${version}`)
} catch (error) {
  console.error(`${colors.red}✖ [build-entry] Failed to generate entry file!${colors.reset}`)
  console.error(`  Error: ${error.message}`)
  process.exit(1)
}
